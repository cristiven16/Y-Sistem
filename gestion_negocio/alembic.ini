[alembic]
# Path to migration scripts.  Relative to alembic.ini.  REQUIRED.
# A semicolon-separated list of "bases" is supported; the "root of
# all migrations" is the directory having no parent.
# version_locations = %(here)s/versions, %(here)s/my_project/versions
; version_locations = alembic/versions  <-- Comentado/eliminado, ya no lo necesitamos.
script_location = alembic

# Template file for generating revisions.  This defaults to the file
# "script.py.mako" within the migration environment directory.
# The file is generated by the 'init' command and should not
# need to be changed.
file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# Set to 'true' to run the environment during the 'revision'
# command, regardless of autogenerate.
# revision_environment = false
revision_environment = true

# Set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false
; sourceless = false

# Set to 'true' to run the environment during autogenerate-related
# operations, regardless of the setting of 'revision_environment'.
# This will call include_object and include_schemas hooks.
# include_object and include_schemas are called with dummy values
# if this flag is false and revision_environment is true.
# autogenerate_include_schemas = true

# set to 'true' to search source files recursively
# based on 'sourceless = true'
# recursive_sourceless = false

# set to 'true' to disable the generation of a downgrade_ops
# method within revision files.  This can be used by environments
# that don't need or can't support downgrade migrations.
# no_downgrade_ops = false

# version location specification; configures the "destination" of
# version files.  When present, this is used in place of the
# "script_location" setting.  See "Using Multiple Migration
# Directories" for an example of use.
# version_locations = %(here)s/../lib/v1/versions

# The separator to use when concatenating multiple version
# paths together.  Defaults to os.pathsep.
# version_path_separator = ;   <--  COMENTADO/ELIMINADO.  ¡Ya no lo usamos!
; version_path_separator = os  <-- COMENTADO/ELIMINADO, ¡Ya no lo usamos!


# A schema name that will be considered the "default" schema, that
# is the schema where the actual version table resides.
# Defaults to "public".  For backends that support multiple schema
# names, this can be a value other than "public", and is required
# if the backend database is to be used with multiple schemas.
version_table_schema = public  # ¡IMPORTANTE! Configura esto si usas un esquema diferente.


# Table name to use for the alembic version table.  This defaults to
# 'alembic_version'.  The script template expects this value to be present.
; version_table = alembic_version  # Deja el valor por defecto, a menos que uses un nombre diferente.

# Max length of a generated revision's "slug" field.
# truncate_slug_length = 40

# Set to a name to have that name always included as a parent
# of newly generated revision files, overriding whatever would normally
# be used as the "base" revision.
# starting_rev = None

# set to a name to prepend the name of newly generated revision
# files, overriding the default behavior which is to use the
# current timestamp
# output_encoding = utf-8

# Customize the rendering of SQL types.  See the documentation
# for further detail.
# type_renderers =

# Specify custom arguments consumed by custom "env.py" scripts,
# including the example env.py scripts generated by "alembic init".
# This is a list of key/value pairs, separated by equals, and separated
# by newlines.  e.g.
# [user_module_prefix]
# sqlalchemy.dialects = myapp.dialect
# [foo]
# bar = baz
# [post_write_hooks]

# Configuration options for post write hooks. If this section is configured,
# alembic runs the post write hooks after revisions are written.
# It is configured per-hook, one section for each hook.

# A list of hooks to invoke. If this is empty, no post write
# hooks will be run.
# hooks =

# Format of variables:
#   REVISION_SCRIPT_FILENAME = revision file name, relative to script location
#   OPERATIONS = migration command: "upgrade", "downgrade", "stamp"
#   HEAD = head revision of the revision after "upgrade", "downgrade" or "stamp"
#   REVISION = current revision of the revision after "upgrade", "downgrade" or "stamp"

# Example: to run the 'black' formatter on the generated revision file:
; [post_write_hooks]
; hooks = black    <-- DESCOMENTA esto DESPUÉS de que las migraciones funcionen
; black.type = console_scripts
; black.entrypoint = black
; black.options = -l 79 REVISION_SCRIPT_FILENAME


# [my_hook]
# type = # e.g. console_scripts, python
# entrypoint = # e.g. black:main
# options = # command-line options to the hook

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console
qualname =

[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO  
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
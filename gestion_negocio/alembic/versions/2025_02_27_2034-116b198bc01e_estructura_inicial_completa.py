"""Estructura inicial completa

Revision ID: 116b198bc01e
Revises: e551f11e9c1a
Create Date: 2025-02-27 20:34:52.955142

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "116b198bc01e"
down_revision: Union[str, None] = "e551f11e9c1a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("formas_pago")
    op.drop_index("ix_ventas_id", table_name="ventas")
    op.drop_table("ventas")
    op.drop_table("empleados")
    op.drop_table("tipos_marketing")
    op.drop_index("ix_monedas_id", table_name="monedas")
    op.drop_table("monedas")
    op.drop_table("retenciones")
    op.drop_table("proveedores")
    op.drop_index("ix_tipo_documento_id", table_name="tipo_documento")
    op.drop_table("tipo_documento")
    op.drop_index("ix_ciudades_id", table_name="ciudades")
    op.drop_table("ciudades")
    op.drop_index("ix_sucursal_id", table_name="sucursal")
    op.drop_table("sucursal")
    op.drop_index("ix_regimen_tributario_id", table_name="regimen_tributario")
    op.drop_table("regimen_tributario")
    op.drop_index("ix_cuentas_wallet_id", table_name="cuentas_wallet")
    op.drop_table("cuentas_wallet")
    op.drop_index("ix_productos_id", table_name="productos")
    op.drop_table("productos")
    op.drop_index("ix_transacciones_id", table_name="transacciones")
    op.drop_table("transacciones")
    op.drop_index("ix_tarifa_precios_id", table_name="tarifa_precios")
    op.drop_table("tarifa_precios")
    op.drop_index("ix_roles_id", table_name="roles")
    op.drop_table("roles")
    op.drop_index("ix_vendedor_id", table_name="vendedor")
    op.drop_table("vendedor")
    op.drop_index("ix_detalles_venta_id", table_name="detalles_venta")
    op.drop_table("detalles_venta")
    op.drop_index("ix_categorias_id", table_name="categorias")
    op.drop_table("categorias")
    op.drop_table("tipos_persona")
    op.drop_table("actividades_economicas")
    op.drop_table("clientes")
    op.drop_table("rutas_logisticas")
    op.drop_index("ix_departamentos_id", table_name="departamentos")
    op.drop_table("departamentos")
    op.drop_index("ix_usuarios_id", table_name="usuarios")
    op.drop_table("usuarios")
    op.drop_index("ix_chats_id", table_name="chats")
    op.drop_table("chats")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "chats",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "usuario_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "mensaje", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "fecha", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["usuario_id"], ["usuarios.id"], name="chats_usuario_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="chats_pkey"),
    )
    op.create_index("ix_chats_id", "chats", ["id"], unique=False)
    op.create_table(
        "usuarios",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('usuarios_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("nombre", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "hashed_password",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("rol_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["rol_id"], ["roles.id"], name="usuarios_rol_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="usuarios_pkey"),
        sa.UniqueConstraint("email", name="usuarios_email_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_usuarios_id", "usuarios", ["id"], unique=False)
    op.create_table(
        "departamentos",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text(
                "nextval('departamentos_id_seq'::regclass)"
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("nombre", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="departamentos_pkey"),
        sa.UniqueConstraint("nombre", name="departamentos_nombre_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        "ix_departamentos_id", "departamentos", ["id"], unique=False
    )
    op.create_table(
        "rutas_logisticas",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text(
                "nextval('rutas_logisticas_id_seq'::regclass)"
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "nombre",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="rutas_logisticas_pkey"),
        sa.UniqueConstraint("nombre", name="rutas_logisticas_nombre_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "clientes",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "tipo_documento_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "numero_documento",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "nombre_razon_social",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "email", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
        sa.Column(
            "pagina_web",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "departamento_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "ciudad_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "direccion",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "telefono1",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "telefono2",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "celular",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "whatsapp",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "tipos_persona_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "regimen_tributario_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "moneda_principal_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "tarifa_precios_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "actividad_economica_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "forma_pago_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "retencion_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "permitir_venta", sa.BOOLEAN(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "descuento",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "cupo_credito",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "tipo_marketing_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "sucursal_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "ruta_logistica_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "vendedor_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "observacion",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["actividad_economica_id"],
            ["actividades_economicas.id"],
            name="clientes_actividad_economica_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["ciudad_id"], ["ciudades.id"], name="clientes_ciudad_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["departamento_id"],
            ["departamentos.id"],
            name="clientes_departamento_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["forma_pago_id"],
            ["formas_pago.id"],
            name="clientes_forma_pago_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["moneda_principal_id"],
            ["monedas.id"],
            name="clientes_moneda_principal_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["regimen_tributario_id"],
            ["regimen_tributario.id"],
            name="clientes_regimen_tributario_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["retencion_id"],
            ["retenciones.id"],
            name="clientes_retencion_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["ruta_logistica_id"],
            ["rutas_logisticas.id"],
            name="clientes_ruta_logistica_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["sucursal_id"], ["sucursal.id"], name="clientes_sucursal_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["tarifa_precios_id"],
            ["tarifa_precios.id"],
            name="clientes_tarifa_precios_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["tipo_documento_id"],
            ["tipo_documento.id"],
            name="clientes_tipo_documento_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["tipo_marketing_id"],
            ["tipos_marketing.id"],
            name="clientes_tipo_marketing_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["tipos_persona_id"],
            ["tipos_persona.id"],
            name="clientes_tipos_persona_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["vendedor_id"], ["empleados.id"], name="clientes_vendedor_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="clientes_pkey"),
        sa.UniqueConstraint(
            "numero_documento", name="clientes_numero_documento_key"
        ),
    )
    op.create_table(
        "actividades_economicas",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text(
                "nextval('actividades_economicas_id_seq'::regclass)"
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "nombre",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="actividades_economicas_pkey"),
        sa.UniqueConstraint(
            "nombre", name="actividades_economicas_nombre_key"
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "tipos_persona",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text(
                "nextval('tipos_persona_id_seq'::regclass)"
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "nombre",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="tipos_persona_pkey"),
        sa.UniqueConstraint("nombre", name="tipos_persona_nombre_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "categorias",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('categorias_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("nombre", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="categorias_pkey"),
        sa.UniqueConstraint("nombre", name="categorias_nombre_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_categorias_id", "categorias", ["id"], unique=False)
    op.create_table(
        "detalles_venta",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "venta_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "producto_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "cantidad", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "precio_unitario",
            sa.NUMERIC(precision=10, scale=2),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["producto_id"],
            ["productos.id"],
            name="detalles_venta_producto_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["venta_id"], ["ventas.id"], name="detalles_venta_venta_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="detalles_venta_pkey"),
    )
    op.create_index(
        "ix_detalles_venta_id", "detalles_venta", ["id"], unique=False
    )
    op.create_table(
        "vendedor",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("nombre", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "identificacion", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name="vendedor_pkey"),
        sa.UniqueConstraint(
            "identificacion", name="vendedor_identificacion_key"
        ),
    )
    op.create_index("ix_vendedor_id", "vendedor", ["id"], unique=False)
    op.create_table(
        "roles",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('roles_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("nombre", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="roles_pkey"),
        sa.UniqueConstraint("nombre", name="roles_nombre_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_roles_id", "roles", ["id"], unique=False)
    op.create_table(
        "tarifa_precios",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text(
                "nextval('tarifa_precios_id_seq'::regclass)"
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("nombre", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="tarifa_precios_pkey"),
        sa.UniqueConstraint("nombre", name="tarifa_precios_nombre_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        "ix_tarifa_precios_id", "tarifa_precios", ["id"], unique=False
    )
    op.create_table(
        "transacciones",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("tipo", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "monto",
            sa.NUMERIC(precision=10, scale=2),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "descripcion", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "fecha", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("id", name="transacciones_pkey"),
    )
    op.create_index(
        "ix_transacciones_id", "transacciones", ["id"], unique=False
    )
    op.create_table(
        "productos",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("nombre", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "codigo_barras", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "categoria_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "precio",
            sa.NUMERIC(precision=10, scale=2),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("stock", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "unidad_medida", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "datos_adicionales",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["categoria_id"],
            ["categorias.id"],
            name="productos_categoria_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="productos_pkey"),
        sa.UniqueConstraint(
            "codigo_barras", name="productos_codigo_barras_key"
        ),
    )
    op.create_index("ix_productos_id", "productos", ["id"], unique=False)
    op.create_table(
        "cuentas_wallet",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "usuario_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "saldo",
            sa.NUMERIC(precision=10, scale=2),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["usuario_id"],
            ["usuarios.id"],
            name="cuentas_wallet_usuario_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="cuentas_wallet_pkey"),
    )
    op.create_index(
        "ix_cuentas_wallet_id", "cuentas_wallet", ["id"], unique=False
    )
    op.create_table(
        "regimen_tributario",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text(
                "nextval('regimen_tributario_id_seq'::regclass)"
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("nombre", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="regimen_tributario_pkey"),
        sa.UniqueConstraint("nombre", name="regimen_tributario_nombre_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        "ix_regimen_tributario_id", "regimen_tributario", ["id"], unique=False
    )
    op.create_table(
        "sucursal",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('sucursal_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("nombre", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="sucursal_pkey"),
        sa.UniqueConstraint("nombre", name="sucursal_nombre_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_sucursal_id", "sucursal", ["id"], unique=False)
    op.create_table(
        "ciudades",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('ciudades_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("nombre", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "departamento_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["departamento_id"],
            ["departamentos.id"],
            name="ciudades_departamento_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="ciudades_pkey"),
        sa.UniqueConstraint("nombre", name="ciudades_nombre_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_ciudades_id", "ciudades", ["id"], unique=False)
    op.create_table(
        "tipo_documento",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text(
                "nextval('tipo_documento_id_seq'::regclass)"
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("nombre", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "abreviatura", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name="tipo_documento_pkey"),
        sa.UniqueConstraint(
            "abreviatura", name="tipo_documento_abreviatura_key"
        ),
        sa.UniqueConstraint("nombre", name="tipo_documento_nombre_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        "ix_tipo_documento_id", "tipo_documento", ["id"], unique=False
    )
    op.create_table(
        "proveedores",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "tipo_documento_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "numero_documento",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "nombre_razon_social",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "email", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
        sa.Column(
            "pagina_web",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "departamento_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "ciudad_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "direccion",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "telefono1",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "telefono2",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "celular",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "whatsapp",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "tipos_persona_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "regimen_tributario_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "moneda_principal_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "tarifa_precios_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "actividad_economica_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "forma_pago_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "retencion_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "permitir_venta", sa.BOOLEAN(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "descuento",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "cupo_credito",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "sucursal_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "observacion",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["actividad_economica_id"],
            ["actividades_economicas.id"],
            name="proveedores_actividad_economica_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["ciudad_id"], ["ciudades.id"], name="proveedores_ciudad_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["departamento_id"],
            ["departamentos.id"],
            name="proveedores_departamento_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["forma_pago_id"],
            ["formas_pago.id"],
            name="proveedores_forma_pago_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["moneda_principal_id"],
            ["monedas.id"],
            name="proveedores_moneda_principal_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["regimen_tributario_id"],
            ["regimen_tributario.id"],
            name="proveedores_regimen_tributario_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["retencion_id"],
            ["retenciones.id"],
            name="proveedores_retencion_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["sucursal_id"],
            ["sucursal.id"],
            name="proveedores_sucursal_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["tarifa_precios_id"],
            ["tarifa_precios.id"],
            name="proveedores_tarifa_precios_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["tipo_documento_id"],
            ["tipo_documento.id"],
            name="proveedores_tipo_documento_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["tipos_persona_id"],
            ["tipos_persona.id"],
            name="proveedores_tipos_persona_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="proveedores_pkey"),
        sa.UniqueConstraint(
            "numero_documento", name="proveedores_numero_documento_key"
        ),
    )
    op.create_table(
        "retenciones",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('retenciones_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "nombre",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="retenciones_pkey"),
        sa.UniqueConstraint("nombre", name="retenciones_nombre_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "monedas",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('monedas_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("codigo", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "nombre",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="monedas_pkey"),
        sa.UniqueConstraint("codigo", name="monedas_codigo_key"),
        sa.UniqueConstraint("nombre", name="monedas_nombre_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_monedas_id", "monedas", ["id"], unique=False)
    op.create_table(
        "tipos_marketing",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "nombre",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="tipos_marketing_pkey"),
        sa.UniqueConstraint("nombre", name="tipos_marketing_nombre_key"),
    )
    op.create_table(
        "empleados",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "tipo_documento_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "numero_documento",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "nombre_razon_social",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "email", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
        sa.Column(
            "telefono1",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "telefono2",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "celular",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "whatsapp",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "tipos_persona_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "regimen_tributario_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "moneda_principal_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "actividad_economica_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "forma_pago_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "retencion_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "departamento_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "ciudad_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "direccion",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "sucursal_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "observacion",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "cargo", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
        sa.Column(
            "fecha_nacimiento", sa.DATE(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "fecha_ingreso", sa.DATE(), autoincrement=False, nullable=True
        ),
        sa.Column("activo", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "es_vendedor", sa.BOOLEAN(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["actividad_economica_id"],
            ["actividades_economicas.id"],
            name="empleados_actividad_economica_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["ciudad_id"], ["ciudades.id"], name="empleados_ciudad_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["departamento_id"],
            ["departamentos.id"],
            name="empleados_departamento_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["forma_pago_id"],
            ["formas_pago.id"],
            name="empleados_forma_pago_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["moneda_principal_id"],
            ["monedas.id"],
            name="empleados_moneda_principal_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["regimen_tributario_id"],
            ["regimen_tributario.id"],
            name="empleados_regimen_tributario_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["retencion_id"],
            ["retenciones.id"],
            name="empleados_retencion_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["sucursal_id"], ["sucursal.id"], name="empleados_sucursal_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["tipo_documento_id"],
            ["tipo_documento.id"],
            name="empleados_tipo_documento_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["tipos_persona_id"],
            ["tipos_persona.id"],
            name="empleados_tipos_persona_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="empleados_pkey"),
        sa.UniqueConstraint(
            "numero_documento", name="empleados_numero_documento_key"
        ),
    )
    op.create_table(
        "ventas",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "cliente_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "total",
            sa.NUMERIC(precision=10, scale=2),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("estado", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "fecha", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["cliente_id"], ["usuarios.id"], name="ventas_cliente_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="ventas_pkey"),
    )
    op.create_index("ix_ventas_id", "ventas", ["id"], unique=False)
    op.create_table(
        "formas_pago",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "nombre",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="formas_pago_pkey"),
        sa.UniqueConstraint("nombre", name="formas_pago_nombre_key"),
    )
    # ### end Alembic commands ###
